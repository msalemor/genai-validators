#!/usr/bin/env python3
"""
AI Code Evaluator
A tool to evaluate code files and determine the likelihood they were generated by AI.
"""

import os
from services.ADOService import download_pr_changes
from services.CodeEvaluatorService import AICodeEvaluator, print_results
import click
from pathlib import Path
from typing import List, Dict, Tuple
import asyncio
from dataclasses import dataclass
from dotenv import load_dotenv
load_dotenv()  # Load environment variables from .env file if present

async def run_evaluation(exclude_ext: tuple = (), exclude_folder: tuple = (), folder: Path = Path('.')):
    try:
        azure_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT')
        api_key = os.getenv('AZURE_OPENAI_API_KEY')
        deployment_name = os.getenv('AZURE_OPENAI_DEPLOYMENT_NAME')
        api_version = os.getenv('AZURE_OPENAI_API_VERSION', '2024-02-15-preview')

        # Convert tuples to sets and normalize extensions
        exclude_extensions = set()
        if exclude_ext:
            for ext in exclude_ext:
                # Ensure extension starts with a dot
                if not ext.startswith('.'):
                    ext = '.' + ext
                exclude_extensions.add(ext.lower())
        
        exclude_folders_set = set(exclude_folder) if exclude_folder else None

        evaluator = AICodeEvaluator(azure_endpoint, api_key, api_version)
        evaluation = await evaluator.evaluate_folder(folder, deployment_name, exclude_extensions, exclude_folders_set)
        print_results(evaluation)
        
    except Exception as e:
        click.echo(f"Error: {str(e)}", err=True)
        raise click.Abort()



@click.group()
def cli():
    """AI Code Evaluator - Analyze code for AI generation likelihood."""
    pass


@cli.command()
@click.argument('folder', type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path))
@click.option('--exclude-ext', multiple=True, help='File extensions to exclude (e.g., --exclude-ext .py --exclude-ext .js)')
@click.option('--exclude-folder', multiple=True, help='Folder names to exclude (e.g., --exclude-folder tests --exclude-folder docs)')
def eval_folder(folder: Path, exclude_ext: tuple, exclude_folder: tuple):
    """
    Evaluate code files in a folder to determine likelihood of AI generation.
    
    FOLDER: Path to the folder containing code files to evaluate.
    """
    
    
    # Run the async function
    if folder:
        asyncio.run(run_evaluation(exclude_ext=exclude_ext, exclude_folder=exclude_folder, folder=folder))


@cli.command()
@click.option('--pr-url', required=True, help='Azure DevOps Pull Request URL')
@click.option('--exclude-ext', multiple=True, help='File extensions to exclude (e.g., --exclude-ext .py --exclude-ext .js)')
@click.option('--exclude-folder', multiple=True, help='Folder names to exclude (e.g., --exclude-folder tests --exclude-folder docs)')
def eval_pr(pr_url, exclude_ext, exclude_folder):
    """Evaluate the files in a PR."""
    click.echo(f"Evaluating PR: {pr_url}")
    folder = download_pr_changes(pr_url)

    # Run the async function
    if folder:
        asyncio.run(run_evaluation(exclude_ext=exclude_ext, exclude_folder=exclude_folder, folder=folder))

if __name__ == '__main__':
    cli()